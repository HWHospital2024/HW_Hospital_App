

pipeline {
    agent any
    environment{
        DOCKER_TAG = getDockerTag()
    }

    stages {
          stage('Pipeline Info') {
                 steps {
                     script {
                         echo """
                         The current Zap configuration:
                             Scan Type: APIS
                             Target: http://ab2240c2ab1f74a62abad9870a7a7777-2073886997.us-east-1.elb.amazonaws.com
                             Generate report: false
                         """
                     }
                 }
         }    

        stage('Build') {
            steps {
                echo "Fetching code base from Git"
                git branch: 'main', url: 'https://github.com/HWHospital2024/HW_Hospital_App'
                
            }
        }

        
        stage('Remove Container') {
            steps {
                // Execute the shell script to remove the container
                script {
                    sh '''
                        #!/bin/bash

                        # Get the container ID of the container you want to remove
                        CONTAINER_ID=$(docker ps -aqf "ancestor=hw_hospital_api")

                        # Check if the container ID is not empty
                        if [ -n "$CONTAINER_ID" ]; then
                            # Remove the container
                            docker rm -f "$CONTAINER_ID"
                            echo "Container with ID $CONTAINER_ID removed successfully."
                        else
                            echo "No container found with the specified image."
                        fi
                    '''
                }
            }
        }
        
        stage('Remove existing object') {
            steps {
                script {
                    // Define the repository and tag of the image you want to remove
                    def repository = 'hw_hospital_api'
                    def tag = 'latest'

                    // Get the image ID of the specified repository and tag
                    def imageId = sh(script: "docker images -q ${repository}:${tag}", returnStdout: true).trim()

                    echo "Program started for removing existing docker image"
                    // Check if the image ID is not empty
                    if (imageId) {
                        // Remove the image
                        sh "docker rmi -f ${imageId}"
                        echo "Image ${repository}:${tag} with ID ${imageId} removed successfully."
                    } else {
                        echo "No image found with repository ${repository} and tag ${tag}."
                    }

                    echo "Docker image removed"
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                // Install npm dependencies
                echo "Automated test started"
                echo "npm initialized"
                sh 'npm i'
                sh 'npm i chai@4'

                // Run Mocha Chai tests
                echo "Mocha Chai test started"
                sh 'npm run test'
                echo "Mocha Chai test completed"
            }
        }
        
        stage('Setting up Docker build') {   
            steps {
                echo "Pulling up last OWASP ZAP container --> Start"
              //  sh 'docker pull owasp/zap2docker-stable'
                echo "Pulling up last VMS container --> End"
                echo "Starting container --> Start"
               // sh """
               // docker run -dt --name owasp \
                //owasp/zap2docker-stable \
              //  /bin/bash
               // """
                sh 'docker build . -t hr3000/hw_hospital_api:${DOCKER_TAG}'
                echo "Docker Container hr3000/hw_hospital_api:${DOCKER_TAG} build completed"

            }
        }
        stage('Docker Hub Movement'){
            steps{
                   echo "Docker image started for movement to docker hub" 
                   withCredentials([string(credentialsId: 'Dockerhub', variable: 'dockerHubPWD')]) {
                      sh "docker login -u hr3000 -p ${dockerHubPWD}"
                   // sh "docker push hr3000/hw_hospital_api:${DOCKER_TAG}"
                    } 
                    echo "Docker image moved to docker hub"
            }
        }
        stage('Kube deployment'){
            steps{
                    echo "Docker image deployment to Kubernetes started"
                    sh "chmod +x changeTagloc.sh"
                    sh "./changeTagloc.sh ${DOCKER_TAG}"
                    sh "kubectl apply -f node-deployment.yml"
                    echo "Docker image deployment to Kubernetes compeleted"
            }
        }
        stage('Scanning target on owasp container'){
            steps{
                 //   sh """
                 //            docker exec owasp \
                 //            zap-api-scan.py \
                 //            -t http://ab2240c2ab1f74a62abad9870a7a7777-2073886997.us-east-1.elb.amazonaws.com \
                 //            -f openapi
                 //            -x report.xml \
                 //            -I
                 //        """
                    echo "Docker image deployment to Kubernetes compeleted"
            }
        }
    }
    post {
        failure {
            mail to: 'hwhr3000@gmail.com',
                 subject: "Pipeline failed: ${currentBuild.fullDisplayName}",
                 body: "The pipeline ${currentBuild.fullDisplayName} has failed. Please check Jenkins for more details."
        }
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
            echo "Removing container"
            script{
            def zapImageId = sh(script: "docker images -q owasp/zap2docker-stable", returnStdout: true).trim()
            
            if (zapImageId) {
                sh "docker stop owasp"
                sh "docker rm owasp"
                echo "OWASP ZAP Docker image removed successfully."
            } else {
                echo "No OWASP ZAP Docker image found."
            }   
            }              
            
        }
    }
    
}

def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
}
